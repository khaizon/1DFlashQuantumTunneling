/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module handle_entities_3 (
    input clk,
    input rst,
    input [15:0] player_location,
    input [255:0] enemy_location,
    output reg [63:0] entities
  );
  
  
  
  wire [1-1:0] M_slow_timer_detector_out;
  reg [1-1:0] M_slow_timer_detector_in;
  edge_detector_5 slow_timer_detector (
    .clk(clk),
    .in(M_slow_timer_detector_in),
    .out(M_slow_timer_detector_out)
  );
  reg [4:0] M_led_ctr_d, M_led_ctr_q = 1'h0;
  reg [3:0] M_enemy_ctr_d, M_enemy_ctr_q = 1'h0;
  wire [1-1:0] M_slow_down_value;
  counter_6 slow_down (
    .clk(clk),
    .rst(rst),
    .value(M_slow_down_value)
  );
  
  always @* begin
    M_led_ctr_d = M_led_ctr_q;
    M_enemy_ctr_d = M_enemy_ctr_q;
    
    M_slow_timer_detector_in = M_slow_down_value;
    entities = 64'h0000000000000000;
    if (M_led_ctr_q != enemy_location[(M_enemy_ctr_q)*16+0+14-:15] && M_led_ctr_q != player_location[0+14-:15]) begin
      entities[(M_led_ctr_q)*2+1-:2] = 1'h0;
    end else begin
      if (M_led_ctr_q == enemy_location[(M_enemy_ctr_q)*16+0+14-:15] && M_led_ctr_q == player_location[0+14-:15]) begin
        entities[(M_led_ctr_q)*2+1-:2] = 1'h1;
      end else begin
        if (M_led_ctr_q == enemy_location[(M_enemy_ctr_q)*16+0+14-:15] && M_led_ctr_q != player_location[0+14-:15]) begin
          entities[(M_led_ctr_q)*2+1-:2] = 2'h3;
        end else begin
          entities[(M_led_ctr_q)*2+1-:2] = 2'h2;
        end
      end
    end
    if (M_slow_timer_detector_out) begin
      M_led_ctr_d = M_led_ctr_q + 1'h1;
    end
    if (M_led_ctr_q == 5'h1f) begin
      M_led_ctr_d = 1'h0;
      M_enemy_ctr_d = 1'h0;
    end
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_led_ctr_q <= 1'h0;
      M_enemy_ctr_q <= 1'h0;
    end else begin
      M_led_ctr_q <= M_led_ctr_d;
      M_enemy_ctr_q <= M_enemy_ctr_d;
    end
  end
  
endmodule
