/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

/*
   Parameters:
     PIXEL_COUNT = 3
*/
module ws2812b_writer_1 (
    input clk,
    input rst,
    input update,
    input [23:0] color,
    output reg [1:0] pixel,
    output reg led
  );
  
  localparam PIXEL_COUNT = 2'h3;
  
  
  localparam SEND_PIXEL_state = 1'd0;
  localparam RESET_state = 1'd1;
  
  reg M_state_d, M_state_q = SEND_PIXEL_state;
  reg [1:0] M_pixel_ctr_d, M_pixel_ctr_q = 1'h0;
  reg [4:0] M_bit_ctr_d, M_bit_ctr_q = 1'h0;
  reg [5:0] M_ctr_d, M_ctr_q = 1'h0;
  reg [12:0] M_rst_ctr_d, M_rst_ctr_q = 1'h0;
  
  reg [23:0] bits;
  
  always @* begin
    M_state_d = M_state_q;
    M_ctr_d = M_ctr_q;
    M_bit_ctr_d = M_bit_ctr_q;
    M_rst_ctr_d = M_rst_ctr_q;
    M_pixel_ctr_d = M_pixel_ctr_q;
    
    led = 1'h0;
    bits = {color[0+0-:1], color[1+0-:1], color[2+0-:1], color[3+0-:1], color[4+0-:1], color[5+0-:1], color[6+0-:1], color[7+0-:1], color[16+0-:1], color[17+0-:1], color[18+0-:1], color[19+0-:1], color[20+0-:1], color[21+0-:1], color[22+0-:1], color[23+0-:1], color[8+0-:1], color[9+0-:1], color[10+0-:1], color[11+0-:1], color[12+0-:1], color[13+0-:1], color[14+0-:1], color[15+0-:1]};
    pixel = M_pixel_ctr_q;
    
    case (M_state_q)
      SEND_PIXEL_state: begin
        if (bits[(M_bit_ctr_q)*1+0-:1]) begin
          led = M_ctr_q < 7'h52;
        end else begin
          led = M_ctr_q < 6'h28;
        end
        M_ctr_d = M_ctr_q + 1'h1;
        if (M_ctr_q == 7'h7a) begin
          M_ctr_d = 1'h0;
          M_bit_ctr_d = M_bit_ctr_q + 1'h1;
          if (M_bit_ctr_q == 5'h17) begin
            M_bit_ctr_d = 1'h0;
            M_pixel_ctr_d = M_pixel_ctr_q + 1'h1;
            if (M_pixel_ctr_q == 3'h2) begin
              M_pixel_ctr_d = 1'h0;
              M_state_d = RESET_state;
            end
          end
        end
      end
      RESET_state: begin
        if ((&M_rst_ctr_q)) begin
          if (update) begin
            M_rst_ctr_d = 1'h0;
            M_state_d = SEND_PIXEL_state;
          end
        end else begin
          M_rst_ctr_d = M_rst_ctr_q + 1'h1;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_pixel_ctr_q <= 1'h0;
      M_bit_ctr_q <= 1'h0;
      M_ctr_q <= 1'h0;
      M_rst_ctr_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_pixel_ctr_q <= M_pixel_ctr_d;
      M_bit_ctr_q <= M_bit_ctr_d;
      M_ctr_q <= M_ctr_d;
      M_rst_ctr_q <= M_rst_ctr_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
