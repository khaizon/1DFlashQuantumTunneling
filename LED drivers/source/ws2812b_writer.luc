module ws2812b_writer #(
    PIXEL_COUNT = 256 : PIXEL_COUNT > 0  		// The number of LEDs in the chain.
  )(
    input clk,  // clock
    input rst,  // reset
    input update, // feed '1' to enable this strip
    input color[24],   			// GBR, 8 bits each, color to render for all LED 
    output pixel[$clog2(PIXEL_COUNT)],  // Index of the LED, with the color in color[24]
    output led		//Goes to the first LED in the chain

  ) {
  
  .clk(clk) {
    .rst(rst) {
      fsm state = {SEND_PIXEL, RESET};
      dff pixel_ctr[$clog2(PIXEL_COUNT)];
      dff bit_ctr[5];
      dff ctr[6];
      dff rst_ctr [$clog2(5000)]; //reset requires 50us of zeroes 
    }
  }
  
  sig bits[24];
  
  always {
    led = 0;
    
    bits = c{color[0], color[1],color[2], color[3], color[4], color[5], color[6], color[7],
      color[16], color[17], color[18], color[19], color[20], color[21], color[22], color[23],
      color[8], color[9], color[10], color[11], color[12], color[13], color[14], color[15]};
    
    
    // 
    pixel = pixel_ctr.q;
    case (state.q) {
      state.SEND_PIXEL:
        if (bits[bit_ctr.q])
          led = ctr.q < 82;
        else
          led = ctr.q < 40;
        
        ctr.d = ctr.q + 1;
        if (ctr.q == 122){ //check if you can send next bit 
          ctr.d = 0;
          
          bit_ctr.d = bit_ctr.q + 1;
          if (bit_ctr.q == 23) { //check if you have sent all 24 bits 
            bit_ctr.d = 0;
            pixel_ctr.d = pixel_ctr.q + 1;
              
            if (pixel_ctr.q == PIXEL_COUNT-1) { //check if you have sent data to all LEDs
              pixel_ctr.d = 0;
              state.d = state.RESET;
            }
          }
        }
      
      state.RESET:
        if (&rst_ctr.q) { // if contents of rst_ctr.q is all 1
          if (update) {
            rst_ctr.d = 0;
            state.d = state.SEND_PIXEL; //send again
          }
        } else {
          rst_ctr.d = rst_ctr.q + 1;
        }
    }
  }
}