module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output outled,           // to LED strip, Br pin C49
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  led_driver led_strip(#PIXEL_COUNT(32), .clk(clk), .rst(rst)); //set for 32 pixels
  seven_seg seg;
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    .rst(rst){
      handle_entities entities;
    }
  }
  
  const PLAYERLOCATON = 5;
  const ENEMYLOCATION =  16x{{32774}};
  
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    led_strip.entities = entities.entities;
    
    entities.player_location = PLAYERLOCATON;
    entities.enemy_location = ENEMYLOCATION;
    
    usb_tx = usb_rx;        // loop serial port
    
    led = 8h00;             // turn LEDs off
    
    io_led = 3x{{8h01}};    // turn LEDs off
    //io_seg = 8hff;          // turn segments off
    //io_sel = 4hf;           // select no digits
    
    
    led_strip.update=1; //sample write
    //led_strip.color=24b1; //sample color RED for all
    outled=led_strip.led;
    seg.char = led_strip.pixel;
    //seg.char = 3; displays 3 on each 7 seg display, works 
    
    io_seg = ~seg.segs;
    io_sel = 0;
  }
}