module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    input usb_rx,           // USB->Serial input
    input customforward[1],      
    input custominbackward[1],
    input custominreset[1],
    output usb_tx,          // USB->Serial output
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    output outled,          // Serial output to the LED strip
    output led [8],         // 8 user controllable LEDs
    output io_led [3][8],   // LEDs on IO Shield
    output livesled[3],
    output levelled[3]
  ) {
  
  sig rst;                  // reset signal
  ws2812b_writer led_strip(#PIXEL_COUNT(32), .clk(clk), .rst(rst)); //set for 3 pixels
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    
    reset_conditioner reset_cond;
    
    // detect up and down button pressers of player
    edge_detector edge_dt_btn_up (#RISE(1), #FALL(0));
    edge_detector edge_dt_btn_down(#RISE(1), #FALL(0));
    edge_detector edge_dt_btn_mid(#RISE(1), #FALL(0));

    // button conditioner for up and down button
    button_conditioner btn_cond_up;
    button_conditioner btn_cond_down;
    button_conditioner btn_cond_mid;
    
    .rst(rst){
      // counter timer(#SIZE(1), #DIV(25));
      game_customBeta gameMachine;
      multi_seven_seg multi_seven;
     }
    
  }
  converter converter;
  entities_handler entities_hand;
  lives_and_levels lives_and_levels_handler;
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits

    usb_tx = usb_rx;        // echo the serial data
    
    // Used the FPGA's LED to check whether the enemies are blinking correctly
    io_led = 3x{{8h00}};
    io_led[0] = c{gameMachine.slow_counter_time[7:0]};
    io_led[1] = c{gameMachine.e14position[15], gameMachine.e15position[15], gameMachine.e8position[15], gameMachine.e7position[15], gameMachine.e16position[15], gameMachine.e3position[15], gameMachine.e2position[15], gameMachine.e1position[15]};
    io_led[2] = c{gameMachine.e12position[15], gameMachine.e13position[15], gameMachine.e11position[15], gameMachine.e10position[15], gameMachine.e6position[15], gameMachine.e5position[15], gameMachine.e4position[15], gameMachine.e9position[15]};   
    
    btn_cond_up.in      = customforward[0];          // to reduce the bouncing effects of the forward button 
    btn_cond_down.in    = custominbackward[0];       // to reduce the bouncing effects of the backward button 
    btn_cond_mid.in     = custominreset[0];          // to reduce the bouncing effects of the reset button 
    edge_dt_btn_up.in   = btn_cond_up.out;           // get the edge of forward button press
    edge_dt_btn_down.in = btn_cond_down.out;         // get the edge of backward button press
    edge_dt_btn_mid.in  = btn_cond_mid.out;          // get the edge of reset button press
    
    // This part feeds the button signals into our modified "Beta" CPU
    gameMachine.up_button     = edge_dt_btn_up.out;       // forward button  
    gameMachine.down_button   = edge_dt_btn_down.out;     // backward button
    gameMachine.middle_button = edge_dt_btn_mid.out;      // reset button
    
    // the modified "Beta" CPU then outputs the lives remaining & player's level
    // which is being fed into "lives_and_levels" module to light up the relevant LEDs 
    lives_and_levels_handler.lives = gameMachine.lives[1:0];  // 'lives left'    in binary
    lives_and_levels_handler.level = gameMachine.level[1:0];  // 'current level' in binary
    livesled = lives_and_levels_handler.livesled_out;         // 'lives left'    in 3 bits --> ie. 3 lives == {1,1,1}
    levelled = lives_and_levels_handler.levelled_out;         // 'current level' in 3 bits --> ie. level 1 == {1,0,0}
    
    // The following is meant to only be visible on the FPGA's seven segment display
    // for the monitoring of the player's position (pp), lives, and level
    // 'converter' modules help to process the binary values of PP, lives and level 
    // into a 4x8 array for the multi_seven module to process
    converter.pp       = gameMachine.playerposition;      // Player's position into converter
    converter.lives    = gameMachine.lives;               // Player's lives left into converter
    converter.level    = gameMachine.level;               // Player's current level into converter
    multi_seven.values = converter.out;                   // Parses the converter's output into the multi seven segment module
    
    io_seg             = ~multi_seven.seg;                // Delivers multi seven segment module's output 
    io_sel             = ~multi_seven.sel;                // to io sel and io seg for multiseven segment display
    
    // The "entities_handler" module takes in the required information required to be shown on the LED led_strip
    // and outputs a 32bit x 24bit array for the LED driver (which converts that array into serial output)
    entities_hand.e6position     = gameMachine.e6position;
    entities_hand.e16position    = gameMachine.e16position;
    entities_hand.e11position    = gameMachine.e11position;
    entities_hand.playerposition = gameMachine.playerposition;
    entities_hand.lives_left     = gameMachine.lives;
    entities_hand.playerwon      = gameMachine.player_won;
    
    led_strip.color  = entities_hand.out[led_strip.pixel];
    led_strip.update = 1;
    outled           = led_strip.led;
    
    
  }
}