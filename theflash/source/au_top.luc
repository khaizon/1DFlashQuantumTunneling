module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    output io_led [3][8],   // LEDs on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    
    fsm game_fsm={
      IDLE, FWD, CHECKPP, BPP, BWD };
      
    edge_detector timerClock(#RISE(1), #FALL(0));
    
    reset_conditioner reset_cond;
    
    edge_detector edge_dt_btn_p1 (#RISE(1), #FALL(0));
    edge_detector edge_dt_btn_p2(#RISE(1), #FALL(0));

    button_conditioner btn_cond_p1;
    button_conditioner btn_cond_p2;
    
    .rst(rst){
      counter timer(#SIZE(1), #DIV(25));
     }
    
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits

    usb_tx = usb_rx;        // echo the serial data
    
    io_led = 3x{{8h00}};    // turn LEDs off
    
    btn_cond_p1.in=io_button[4]; //to reduce the bouncing effects of your button 
    btn_cond_p2.in=io_button[3];
    edge_dt_btn_p1.in=btn_cond_p1.out; //get the edge of button press
    edge_dt_btn_p2.in=btn_cond_p2.out;
    
    timerClock.in = timer.value;
    
    // standard setting unless otherwise overwritten by each case 
    // regfile_write_address = 1111;
    // regfile_read_address_a = 0000;
    // regfile_read_address_b = 0000;
    // alu_out_sel = 0;
    
    case(game_fsm.q) {
    
      game_fsm.IDLE:
        if (edge_dt_btn_p1.out)
          game_fsm.d = game_fsm.FWD;
        else if (edge_dt_btn_p2.out)
          game_fsm.d = game_fsm.CHECKPP;
          
      game_fsm.FWD:
        // alufn = b000001;
        // asel = b10;
        // bsel = b00;
        // we_regfile = b1;
        io_led[0] = c{0000, 0, 1, 0, 1};
        if (timerClock.out==1) 
          game_fsm.d = game_fsm.IDLE;
          
      game_fsm.CHECKPP:
        io_led[0] = c{0000, 0, 0, 0, 1};
        if (timerClock.out==1)
          game_fsm.d = game_fsm.BPP;
        
      game_fsm.BPP:
        io_led[0] = c{0000, 0, 0, 0, 0};
        if (timerClock.out==1)
          game_fsm.d = game_fsm.BWD;
        
      game_fsm.BWD:
        io_led[0] = c{0000, 1, 0, 0, 1};
        if (timerClock.out==1)
          game_fsm.d = game_fsm.IDLE;
        
      }
    
  }
}