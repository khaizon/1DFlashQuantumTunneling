/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module game_customBeta_5 (
    input clk,
    input rst,
    input up_button,
    input down_button,
    input middle_button,
    output reg [15:0] lives,
    output reg [15:0] playerposition,
    output reg [15:0] level,
    output reg [15:0] slow_counter_time,
    output reg [6:0] state_number,
    output reg [15:0] result,
    output reg [15:0] e1position,
    output reg [15:0] e2position,
    output reg [15:0] e3position,
    output reg [15:0] e4position,
    output reg [15:0] e5position,
    output reg [15:0] e6position,
    output reg [15:0] e7position,
    output reg [15:0] e8position,
    output reg [15:0] e9position,
    output reg [15:0] e10position,
    output reg [15:0] e11position,
    output reg [15:0] e12position,
    output reg [15:0] e13position,
    output reg [15:0] e14position,
    output reg [15:0] e15position,
    output reg [15:0] e16position
  );
  
  
  
  reg [15:0] alu_a;
  
  reg [15:0] alu_b;
  
  wire [16-1:0] M_game_alu_out;
  reg [16-1:0] M_game_alu_a;
  reg [16-1:0] M_game_alu_b;
  reg [6-1:0] M_game_alu_alufn;
  alu_16_bit_10 game_alu (
    .a(M_game_alu_a),
    .b(M_game_alu_b),
    .alufn(M_game_alu_alufn),
    .out(M_game_alu_out)
  );
  
  wire [1-1:0] M_fast_timer_detector_out;
  reg [1-1:0] M_fast_timer_detector_in;
  edge_detector_3 fast_timer_detector (
    .clk(clk),
    .in(M_fast_timer_detector_in),
    .out(M_fast_timer_detector_out)
  );
  wire [1-1:0] M_slow_timer_detector_out;
  reg [1-1:0] M_slow_timer_detector_in;
  edge_detector_3 slow_timer_detector (
    .clk(clk),
    .in(M_slow_timer_detector_in),
    .out(M_slow_timer_detector_out)
  );
  wire [6-1:0] M_game_controlunit_control_sig_alufn;
  wire [2-1:0] M_game_controlunit_control_sig_asel;
  wire [2-1:0] M_game_controlunit_control_sig_bsel;
  wire [1-1:0] M_game_controlunit_control_sig_write_enable;
  wire [5-1:0] M_game_controlunit_control_sig_ra;
  wire [5-1:0] M_game_controlunit_control_sig_rb;
  wire [5-1:0] M_game_controlunit_control_sig_rc;
  wire [2-1:0] M_game_controlunit_control_sig_wdsel;
  wire [7-1:0] M_game_controlunit_state_number;
  wire [16-1:0] M_game_controlunit_result;
  reg [1-1:0] M_game_controlunit_fast_counter;
  reg [1-1:0] M_game_controlunit_slow_counter;
  reg [1-1:0] M_game_controlunit_forward_pressed;
  reg [1-1:0] M_game_controlunit_backward_pressed;
  reg [1-1:0] M_game_controlunit_reset_pressed;
  reg [16-1:0] M_game_controlunit_rb_data;
  game_CU_11 game_controlunit (
    .clk(clk),
    .rst(rst),
    .fast_counter(M_game_controlunit_fast_counter),
    .slow_counter(M_game_controlunit_slow_counter),
    .forward_pressed(M_game_controlunit_forward_pressed),
    .backward_pressed(M_game_controlunit_backward_pressed),
    .reset_pressed(M_game_controlunit_reset_pressed),
    .rb_data(M_game_controlunit_rb_data),
    .control_sig_alufn(M_game_controlunit_control_sig_alufn),
    .control_sig_asel(M_game_controlunit_control_sig_asel),
    .control_sig_bsel(M_game_controlunit_control_sig_bsel),
    .control_sig_write_enable(M_game_controlunit_control_sig_write_enable),
    .control_sig_ra(M_game_controlunit_control_sig_ra),
    .control_sig_rb(M_game_controlunit_control_sig_rb),
    .control_sig_rc(M_game_controlunit_control_sig_rc),
    .control_sig_wdsel(M_game_controlunit_control_sig_wdsel),
    .state_number(M_game_controlunit_state_number),
    .result(M_game_controlunit_result)
  );
  wire [16-1:0] M_memory_out_a;
  wire [16-1:0] M_memory_out_b;
  wire [16-1:0] M_memory_playerposition;
  wire [16-1:0] M_memory_e1position;
  wire [16-1:0] M_memory_e2position;
  wire [16-1:0] M_memory_e3position;
  wire [16-1:0] M_memory_e4position;
  wire [16-1:0] M_memory_e5position;
  wire [16-1:0] M_memory_e6position;
  wire [16-1:0] M_memory_e7position;
  wire [16-1:0] M_memory_e8position;
  wire [16-1:0] M_memory_e9position;
  wire [16-1:0] M_memory_e10position;
  wire [16-1:0] M_memory_e11position;
  wire [16-1:0] M_memory_e12position;
  wire [16-1:0] M_memory_e13position;
  wire [16-1:0] M_memory_e14position;
  wire [16-1:0] M_memory_e15position;
  wire [16-1:0] M_memory_e16position;
  wire [16-1:0] M_memory_playerscore;
  wire [16-1:0] M_memory_lives_left_output;
  wire [16-1:0] M_memory_slow_counter_output;
  wire [16-1:0] M_memory_difficulty_level_output;
  reg [5-1:0] M_memory_write_address;
  reg [1-1:0] M_memory_we;
  reg [16-1:0] M_memory_data;
  reg [5-1:0] M_memory_read_address_a;
  reg [5-1:0] M_memory_read_address_b;
  game_miniRegfiles_12 memory (
    .clk(clk),
    .rst(rst),
    .write_address(M_memory_write_address),
    .we(M_memory_we),
    .data(M_memory_data),
    .read_address_a(M_memory_read_address_a),
    .read_address_b(M_memory_read_address_b),
    .out_a(M_memory_out_a),
    .out_b(M_memory_out_b),
    .playerposition(M_memory_playerposition),
    .e1position(M_memory_e1position),
    .e2position(M_memory_e2position),
    .e3position(M_memory_e3position),
    .e4position(M_memory_e4position),
    .e5position(M_memory_e5position),
    .e6position(M_memory_e6position),
    .e7position(M_memory_e7position),
    .e8position(M_memory_e8position),
    .e9position(M_memory_e9position),
    .e10position(M_memory_e10position),
    .e11position(M_memory_e11position),
    .e12position(M_memory_e12position),
    .e13position(M_memory_e13position),
    .e14position(M_memory_e14position),
    .e15position(M_memory_e15position),
    .e16position(M_memory_e16position),
    .playerscore(M_memory_playerscore),
    .lives_left_output(M_memory_lives_left_output),
    .slow_counter_output(M_memory_slow_counter_output),
    .difficulty_level_output(M_memory_difficulty_level_output)
  );
  wire [1-1:0] M_slow_timer_value;
  counter_13 slow_timer (
    .clk(clk),
    .rst(rst),
    .value(M_slow_timer_value)
  );
  wire [1-1:0] M_fast_timer_value;
  counter_14 fast_timer (
    .clk(clk),
    .rst(rst),
    .value(M_fast_timer_value)
  );
  
  always @* begin
    M_fast_timer_detector_in = M_fast_timer_value;
    M_slow_timer_detector_in = M_slow_timer_value;
    M_game_controlunit_fast_counter = M_fast_timer_detector_out;
    M_game_controlunit_slow_counter = M_slow_timer_detector_out;
    M_game_controlunit_forward_pressed = up_button;
    M_game_controlunit_backward_pressed = down_button;
    M_game_controlunit_reset_pressed = middle_button;
    M_memory_we = M_game_controlunit_control_sig_write_enable;
    M_memory_write_address = M_game_controlunit_control_sig_rc;
    M_memory_read_address_a = M_game_controlunit_control_sig_ra;
    M_memory_read_address_b = M_game_controlunit_control_sig_rb;
    M_game_controlunit_rb_data = M_memory_out_b;
    lives = M_memory_lives_left_output;
    slow_counter_time = M_memory_slow_counter_output;
    playerposition = M_memory_playerposition;
    state_number = M_game_controlunit_state_number;
    level = M_memory_difficulty_level_output;
    result = M_game_controlunit_result;
    e1position = M_memory_e1position;
    e2position = M_memory_e2position;
    e3position = M_memory_e3position;
    e4position = M_memory_e4position;
    e5position = M_memory_e5position;
    e6position = M_memory_e6position;
    e7position = M_memory_e7position;
    e8position = M_memory_e8position;
    e9position = M_memory_e9position;
    e10position = M_memory_e10position;
    e11position = M_memory_e11position;
    e12position = M_memory_e12position;
    e13position = M_memory_e13position;
    e14position = M_memory_e14position;
    e15position = M_memory_e15position;
    e16position = M_memory_e16position;
    
    case (M_game_controlunit_control_sig_asel)
      2'h0: begin
        alu_a = M_memory_out_a;
      end
      2'h1: begin
        alu_a = 1'h0;
      end
      2'h2: begin
        alu_a = 1'h1;
      end
      2'h3: begin
        alu_a = 2'h3;
      end
      default: begin
        alu_a = 1'h0;
      end
    endcase
    
    case (M_game_controlunit_control_sig_bsel)
      2'h0: begin
        alu_b = M_memory_out_b;
      end
      2'h1: begin
        alu_b = 1'h0;
      end
      2'h2: begin
        alu_b = 16'h801f;
      end
      2'h3: begin
        alu_b = 2'h2;
      end
      default: begin
        alu_b = 1'h0;
      end
    endcase
    M_game_alu_a = alu_a;
    M_game_alu_b = alu_b;
    M_game_alu_alufn = M_game_controlunit_control_sig_alufn;
    
    case (M_game_controlunit_control_sig_wdsel)
      2'h1: begin
        M_memory_data = 8'h1a;
      end
      2'h2: begin
        M_memory_data = 12'h11b;
      end
      2'h3: begin
        M_memory_data = 16'h8000;
      end
      default: begin
        M_memory_data = M_game_alu_out;
      end
    endcase
  end
endmodule
