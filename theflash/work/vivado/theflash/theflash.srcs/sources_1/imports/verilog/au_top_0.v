/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module au_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    output reg [23:0] io_led,
    input [4:0] io_button,
    input usb_rx,
    output reg usb_tx,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  localparam IDLE_game_fsm = 3'd0;
  localparam FWD_game_fsm = 3'd1;
  localparam CHECKPP_game_fsm = 3'd2;
  localparam BPP_game_fsm = 3'd3;
  localparam BWD_game_fsm = 3'd4;
  
  reg [2:0] M_game_fsm_d, M_game_fsm_q = IDLE_game_fsm;
  wire [1-1:0] M_timerClock_out;
  reg [1-1:0] M_timerClock_in;
  edge_detector_1 timerClock (
    .clk(clk),
    .in(M_timerClock_in),
    .out(M_timerClock_out)
  );
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_2 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_edge_dt_btn_p1_out;
  reg [1-1:0] M_edge_dt_btn_p1_in;
  edge_detector_1 edge_dt_btn_p1 (
    .clk(clk),
    .in(M_edge_dt_btn_p1_in),
    .out(M_edge_dt_btn_p1_out)
  );
  wire [1-1:0] M_edge_dt_btn_p2_out;
  reg [1-1:0] M_edge_dt_btn_p2_in;
  edge_detector_1 edge_dt_btn_p2 (
    .clk(clk),
    .in(M_edge_dt_btn_p2_in),
    .out(M_edge_dt_btn_p2_out)
  );
  wire [1-1:0] M_btn_cond_p1_out;
  reg [1-1:0] M_btn_cond_p1_in;
  button_conditioner_3 btn_cond_p1 (
    .clk(clk),
    .in(M_btn_cond_p1_in),
    .out(M_btn_cond_p1_out)
  );
  wire [1-1:0] M_btn_cond_p2_out;
  reg [1-1:0] M_btn_cond_p2_in;
  button_conditioner_3 btn_cond_p2 (
    .clk(clk),
    .in(M_btn_cond_p2_in),
    .out(M_btn_cond_p2_out)
  );
  wire [1-1:0] M_timer_value;
  counter_4 timer (
    .clk(clk),
    .rst(rst),
    .value(M_timer_value)
  );
  
  always @* begin
    M_game_fsm_d = M_game_fsm_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    io_seg = 8'hff;
    io_sel = 4'hf;
    usb_tx = usb_rx;
    io_led = 24'h000000;
    M_btn_cond_p1_in = io_button[4+0-:1];
    M_btn_cond_p2_in = io_button[3+0-:1];
    M_edge_dt_btn_p1_in = M_btn_cond_p1_out;
    M_edge_dt_btn_p2_in = M_btn_cond_p2_out;
    M_timerClock_in = M_timer_value;
    
    case (M_game_fsm_q)
      IDLE_game_fsm: begin
        if (M_edge_dt_btn_p1_out) begin
          M_game_fsm_d = FWD_game_fsm;
        end else begin
          if (M_edge_dt_btn_p2_out) begin
            M_game_fsm_d = CHECKPP_game_fsm;
          end
        end
      end
      FWD_game_fsm: begin
        io_led[0+7-:8] = 5'h05;
        if (M_timerClock_out == 1'h1) begin
          M_game_fsm_d = IDLE_game_fsm;
        end
      end
      CHECKPP_game_fsm: begin
        io_led[0+7-:8] = 5'h01;
        if (M_timerClock_out == 1'h1) begin
          M_game_fsm_d = BPP_game_fsm;
        end
      end
      BPP_game_fsm: begin
        io_led[0+7-:8] = 5'h00;
        if (M_timerClock_out == 1'h1) begin
          M_game_fsm_d = BWD_game_fsm;
        end
      end
      BWD_game_fsm: begin
        io_led[0+7-:8] = 5'h09;
        if (M_timerClock_out == 1'h1) begin
          M_game_fsm_d = IDLE_game_fsm;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    M_game_fsm_q <= M_game_fsm_d;
  end
  
endmodule
